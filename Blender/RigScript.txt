import bpy
from bpy_extras import view3d_utils
from bpy.props import (StringProperty,
                       BoolProperty,
                       IntProperty,
                       FloatProperty,
                       EnumProperty,
                       PointerProperty,
                       )
from bpy.types import (Panel,
                       Operator,
                       PropertyGroup,
                       )
import math
        

class MySettings(PropertyGroup):

    sizeGrip = FloatProperty(
        name = "Grip size",
        description="A float property",
        default = .3,
        min = 0,
        max = 1000
        )
        
    gripDistance = FloatProperty(
        name = "Grip distance",
        description="A float property",
        default = .5,
        min = 0,
        max = 1000
        )
    
    feetLength = FloatProperty(
        name = "Feet lenght",
        description="A float property",
        default = .3,
        min = 0,
        max = 1000
        )
    
    jumpHeight = FloatProperty(
        name = "Jump height",
        description="A float property",
        default = 4,
        min = 0,
        max = 1000
        )
        
bpy.utils.register_module(__name__)
bpy.types.Scene.my_tool = PointerProperty(type=MySettings)

class CustomPanel(bpy.types.Panel):
    
    bl_label = "Auto Rigify"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'TOOLS'

    def draw(self, context):
        
        layout = self.layout
        
        scene = context.scene
        mytool = scene.my_tool
        
        self.layout.operator("rig.positionview")
        self.layout.operator("rig.placebalise")
        self.layout.operator("rig.generaterig")
        self.layout.operator("rig.deletebalises")
        self.layout.operator("rig.link")
        
        obj = context.object
        if obj!=None:
            row = layout.row()
            row.prop(obj, "name")
        
        layout.prop(mytool, "sizeGrip")
        layout.prop(mytool, "gripDistance")
        layout.prop(mytool, "feetLength")
        
        


bpy.utils.register_class(CustomPanel)

class RIG_OT_positionview(bpy.types.Operator):
    bl_idname = "rig.positionview"
    bl_label = "Position View"
 
    def execute(self, context):
        positionView()
        return{'FINISHED'}    

bpy.utils.register_class(RIG_OT_positionview)

class RIG_OT_link(bpy.types.Operator):
    bl_idname = "rig.link"
    bl_label = "Link"
 
    def execute(self, context):
        link()
        return{'FINISHED'}    

bpy.utils.register_class(RIG_OT_link)

class RIG_OT_deletebalises(bpy.types.Operator):
    bl_idname = "rig.deletebalises"
    bl_label = "Delete balises"
 
    def execute(self, context):
        deleteBalises()
        return{'FINISHED'}    
 
#    Registration
bpy.utils.register_class(RIG_OT_deletebalises)

class RIG_OT_placebalise(bpy.types.Operator):
    bl_idname = "rig.placebalise"
    bl_label = "Place balises"
 
    def execute(self, context):
        placerBalise()
        return{'FINISHED'}    
 
#    Registration
bpy.utils.register_class(RIG_OT_placebalise)

class RIG_OT_generaterig(bpy.types.Operator):
    bl_idname = "rig.generaterig"
    bl_label = "Generate rig"
 
    def execute(self, context):
        createArmature((0,0,0))
        return{'FINISHED'}    
 
#    Registration
bpy.utils.register_class(RIG_OT_generaterig)


class AnimationPanel(bpy.types.Panel):
    
    bl_label = "Animation Panel"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'TOOLS'

    def draw(self, context):
        
        scene = context.scene
        mytool = scene.my_tool
        
        self.layout.operator("rig.jump")
        self.layout.prop(mytool, "jumpHeight")
        self.layout.operator("rig.walk")
        r=self.layout.row()
        r.label(text="Anim controls")
        self.layout.operator("rig.play")
        self.layout.operator("rig.reset")
        
bpy.utils.register_class(AnimationPanel)
        
class RIG_OT_jump(bpy.types.Operator):
    bl_idname = "rig.jump"
    bl_label = "Play jump"
 
    def execute(self, context):
        jump()
        return{'FINISHED'}    
 
#    Registration
bpy.utils.register_class(RIG_OT_jump)

class RIG_OT_walk(bpy.types.Operator):
    bl_idname = "rig.walk"
    bl_label = "Play walk"
 
    def execute(self, context):
        walk()
        return{'FINISHED'}    
 
#    Registration
bpy.utils.register_class(RIG_OT_walk)

class RIG_OT_play(bpy.types.Operator):
    bl_idname = "rig.play"
    bl_label = "Play/Stop"
 
    def execute(self, context):
        bpy.ops.screen.animation_play()
        return{'FINISHED'}    
 
#    Registration
bpy.utils.register_class(RIG_OT_play)

class RIG_OT_reset(bpy.types.Operator):
    bl_idname = "rig.reset"
    bl_label = "Reset"
 
    def execute(self, context):
        bpy.ops.screen.frame_jump(end=False)
        return{'FINISHED'}    
 
#    Registration
bpy.utils.register_class(RIG_OT_reset)
        

class ModalOperator(bpy.types.Operator):
    bl_idname = "object.modal_operator"
    bl_label = "Simple Modal Operator"
    
    nbBalises = 7
    nbPlacer = 0
    
    names = ["topHead", "neckBase", "pelvis", "leftHand", "rightHand", "leftFoot", "rightFoot"]
    
    def placerRepere(self):
        bpy.ops.mesh.primitive_uv_sphere_add(size=.1, location=(0, 0, 0))
        bpy.context.selected_objects[0].name=self.names[self.nbPlacer]

    def __init__(self):
        print("Start")
        self.placerRepere()

    def __del__(self):
        #placerBalise()
        print("End")

    def execute(self, context):
        for area in bpy.context.screen.areas:
            if area.type == 'VIEW_3D':
                for region in area.regions:
                    if region.type == 'WINDOW':
                        override = {'area': area, 'region': region, 'edit_object': bpy.context.edit_object}
                        event = self.event
                        rv3d = area.spaces[0].region_3d
                        coord = event.mouse_region_x, event.mouse_region_y

                        # get the ray from the viewport and mouse
                        ray_origin = view3d_utils.region_2d_to_origin_3d(region, rv3d, coord)
                        context.object.location.y = ray_origin.y
                        context.object.location.z = ray_origin.z
        

    def modal(self, context, event):
        if event.type == 'MOUSEMOVE':  # Apply
            self.event = event
            self.execute(context)
        elif event.type == 'LEFTMOUSE' and event.value == 'RELEASE':  # Confirm
            self.nbPlacer+=1
            if self.nbPlacer == self.nbBalises:
                return {'FINISHED'}
            else:
                self.placerRepere()
        elif event.type in ( 'ESC'):  # Cancel
            return {'CANCELLED'}

        return {'RUNNING_MODAL'}

    def invoke(self, context, event):
        self.event = event
        self.execute(context)

        print(context.window_manager.modal_handler_add(self))
        return {'RUNNING_MODAL'}


bpy.utils.register_class(ModalOperator)


def createArmature(origin):
    
    scene = bpy.context.scene
    mytool = scene.my_tool
    
    feetLength=mytool.feetLength
    gripDistance = mytool.gripDistance
    coef=mytool.sizeGrip
    
    balises = {}
    
    balises["topHead"] = bpy.data.objects["topHead"].location
    balises["neckBase"] = bpy.data.objects["neckBase"].location
    balises["pelvis"] = bpy.data.objects["pelvis"].location
    balises["leftHand"] = bpy.data.objects["leftHand"].location
    balises["rightHand"] = bpy.data.objects["rightHand"].location
    balises["leftFoot"] = bpy.data.objects["leftFoot"].location
    balises["rightFoot"] = bpy.data.objects["rightFoot"].location
    
    #bpy.ops.object.mode_set(mode='OBJECT')
    bpy.ops.object.select_all(action='DESELECT')
    #bpy.ops.object.delete(use_global=False)
    
    
    # Create armature and object
    #bpy.ops.object.mode_set(mode='OBJECT')
    
    amt = bpy.data.armatures.new('arm')
    rig = bpy.data.objects.new('rig', amt)
    edit_bones={}
    rig.location = origin
    rig.show_x_ray = True
    amt.show_names = True
    # Link object to scene
    scn = bpy.context.scene
    scn.objects.link(rig)
    scn.objects.active = rig
    scn.update()
 
    # Create bones
    
    coefArticulation=.1
    
    bpy.ops.object.editmode_toggle()
    
    diffX=balises["neckBase"].x - balises["pelvis"].x
    diffX/=3
    diffY=balises["neckBase"].y - balises["pelvis"].y
    diffY/=3
    diffZ=balises["neckBase"].z - balises["pelvis"].z
    diffZ/=3
    
    hips = amt.edit_bones.new('hips')
    hips.head = (balises["pelvis"].x,balises["pelvis"].y,balises["pelvis"].z)
    hips.tail = (balises["pelvis"].x+diffX-coefArticulation,balises["pelvis"].y+diffY,balises["pelvis"].z+diffZ)
    
    lowerBack = amt.edit_bones.new('lowerBack')
    lowerBack.head = hips.tail
    lowerBack.tail = (balises["pelvis"].x+diffX*2-coefArticulation,balises["pelvis"].y+diffY*2,balises["pelvis"].z+diffZ*2)
    lowerBack.use_connect = True
    lowerBack.parent = hips
    
    spine = amt.edit_bones.new('spine')
    spine.head = lowerBack.tail
    spine.tail = (balises["neckBase"].x,balises["neckBase"].y,balises["neckBase"].z)
    spine.use_connect = True
    spine.parent = lowerBack
    
    diffX=balises["topHead"].x - balises["neckBase"].x
    diffX/=2
    diffY=balises["topHead"].y - balises["neckBase"].y
    diffY/=2
    diffZ=balises["topHead"].z - balises["neckBase"].z
    diffZ/=2
    
    neck = amt.edit_bones.new('neck')
    neck.head = spine.tail
    neck.tail = (balises["neckBase"].x+diffX,balises["neckBase"].y+diffY,balises["neckBase"].z+diffZ)
    neck.use_connect = True
    neck.parent = spine
    
    head = amt.edit_bones.new('head')
    head.head = neck.tail
    head.tail = (balises["topHead"].x,balises["topHead"].y,balises["topHead"].z)
    head.use_connect = True
    head.parent = neck
    
    nb=5
    diffX=(balises["leftHand"].x - balises["neckBase"].x)/nb
    diffY=(balises["leftHand"].y - balises["neckBase"].y)/nb
    diffZ=(balises["leftHand"].z - balises["neckBase"].z)/nb
    
    leftArm = amt.edit_bones.new('leftArm')
    leftArm.head = spine.tail
    print(balises["neckBase"].x+diffX*2-coefArticulation)
    leftArm.tail = (balises["neckBase"].x+diffX*2-coefArticulation,balises["neckBase"].y+diffY*2,balises["neckBase"].z+diffZ*2)
    leftArm.use_connect = True
    leftArm.parent = spine
    
    leftForearm = amt.edit_bones.new('leftForearm')
    leftForearm.head = leftArm.tail
    leftForearm.tail = (balises["neckBase"].x+diffX*4-coefArticulation,balises["neckBase"].y+diffY*4,balises["neckBase"].z+diffZ*4)
    leftForearm.use_connect = True
    leftForearm.parent = leftArm
    
    leftHand = amt.edit_bones.new('leftHand')
    leftHand.head = leftForearm.tail
    leftHand.tail = (balises["leftHand"].x,balises["leftHand"].y,balises["leftHand"].z)
    leftHand.use_connect = True
    leftHand.parent = leftForearm
    
    nb=5
    diffX=(balises["rightHand"].x - balises["neckBase"].x)/nb
    diffY=(balises["rightHand"].y - balises["neckBase"].y)/nb
    diffZ=(balises["rightHand"].z - balises["neckBase"].z)/nb
    
    rightArm = amt.edit_bones.new('rightArm')
    rightArm.head = spine.tail
    print(balises["neckBase"].x+diffX*2-coefArticulation)
    rightArm.tail = (balises["neckBase"].x+diffX*2-coefArticulation,balises["neckBase"].y+diffY*2,balises["neckBase"].z+diffZ*2)
    rightArm.use_connect = True
    rightArm.parent = spine
    
    rigthForearm = amt.edit_bones.new('rigthForearm')
    rigthForearm.head = rightArm.tail
    rigthForearm.tail = (balises["neckBase"].x+diffX*4-coefArticulation,balises["neckBase"].y+diffY*4,balises["neckBase"].z+diffZ*4)
    rigthForearm.use_connect = True
    rigthForearm.parent = rightArm
    
    rightHand = amt.edit_bones.new('rightHand')
    rightHand.head = rigthForearm.tail
    rightHand.tail = (balises["rightHand"].x,balises["rightHand"].y,balises["rightHand"].z)
    rightHand.use_connect = True
    rightHand.parent = rigthForearm
    
    startX=balises["pelvis"].x
    startY=balises["leftFoot"].y
    startZ=balises["pelvis"].z
    nb=8
    diffX=(balises["leftFoot"].x - startX)/nb
    diffY=(balises["leftFoot"].y - startY)/nb
    diffZ=(balises["leftFoot"].z - startZ)/nb
    
    leftUpLeg = amt.edit_bones.new('leftUpLeg')
    leftUpLeg.head = (startX,startY, startZ)
    leftUpLeg.tail = (startX+diffX*4+coefArticulation,startY+diffY*4, startZ+diffZ*4)
    leftUpLeg.parent = hips
    
    leftLeg = amt.edit_bones.new('leftLeg')
    leftLeg.head = leftUpLeg.tail
    leftLeg.tail = (startX+diffX*8+coefArticulation,startY+diffY*8, startZ+diffZ*8)
    leftLeg.use_connect = True
    leftLeg.parent = leftUpLeg
    
    leftFoot = amt.edit_bones.new('leftFoot')
    leftFoot.head = leftLeg.tail
    leftFoot.tail = (feetLength,balises["leftFoot"].y,balises["leftFoot"].z)
    leftFoot.use_connect = True
    leftFoot.parent = leftLeg
    
    startX=balises["pelvis"].x
    startY=balises["rightFoot"].y
    startZ=balises["pelvis"].z
    nb=8
    diffX=(balises["rightFoot"].x - startX)/nb
    diffY=(balises["rightFoot"].y - startY)/nb
    diffZ=(balises["rightFoot"].z - startZ)/nb
    
    rightUpLeg = amt.edit_bones.new('rightUpLeg')
    rightUpLeg.head = (startX,startY, startZ)
    rightUpLeg.tail = (startX+diffX*4+coefArticulation,startY+diffY*4, startZ+diffZ*4)
    rightUpLeg.parent = hips
    
    rightLeg = amt.edit_bones.new('rightLeg')
    rightLeg.head = rightUpLeg.tail
    rightLeg.tail = (startX+diffX*8+coefArticulation,startY+diffY*8, startZ+diffZ*8)
    rightLeg.use_connect = True
    rightLeg.parent = rightUpLeg
    
    rightFoot = amt.edit_bones.new('rightFoot')
    rightFoot.head = rightLeg.tail
    rightFoot.tail = (feetLength,balises["rightFoot"].y,balises["rightFoot"].z)
    rightFoot.use_connect = True
    rightFoot.parent = rightLeg
    
    rightLegIK = amt.edit_bones.new('rightLegIK')
    rightLegIK.head = rightFoot.head
    rightLegIK.tail = (rightLegIK.head.x-coef,rightLegIK.head.y,rightLegIK.head.z)
    rightLegIK.use_deform = False
    
    leftLegIK = amt.edit_bones.new('leftLegIK')
    leftLegIK.head = leftFoot.head
    leftLegIK.tail = (leftLegIK.head.x-coef,leftLegIK.head.y,leftLegIK.head.z)
    leftLegIK.use_deform = False
    
    rightKneeIK = amt.edit_bones.new('rightKneeIK')
    rightKneeIK.head = (rightLeg.head.x+gripDistance,rightLeg.head.y,rightLeg.head.z)
    rightKneeIK.tail = (rightKneeIK.head.x ,rightKneeIK.head.y ,rightKneeIK.head.z+coef)
    rightKneeIK.use_deform = False
    
    leftKneeIK = amt.edit_bones.new('leftKneeIK')
    leftKneeIK.head = (leftLeg.head.x+gripDistance,leftLeg.head.y,leftLeg.head.z)
    leftKneeIK.tail = (leftKneeIK.head.x ,leftKneeIK.head.y ,leftKneeIK.head.z+coef)
    leftKneeIK.use_deform = False
    
    rightElbowIK = amt.edit_bones.new('rightElbowIK')
    rightElbowIK.head = (rightArm.tail.x+gripDistance,rightArm.tail.y,rightArm.tail.z)
    rightElbowIK.tail = (rightElbowIK.head.x ,rightElbowIK.head.y ,rightElbowIK.head.z+coef)
    rightElbowIK.use_deform = False
    
    leftElbowIK = amt.edit_bones.new('leftElbowIK')
    leftElbowIK.head = (leftArm.tail.x+gripDistance,leftArm.tail.y,leftArm.tail.z)
    leftElbowIK.tail = (leftElbowIK.head.x ,leftElbowIK.head.y ,leftElbowIK.head.z+coef)
    leftElbowIK.use_deform = False
    
    rightArmIK = amt.edit_bones.new('rightArmIK')
    rightArmIK.head = rightHand.tail
    rightArmIK.tail = (rightArmIK.head.x-coef,rightArmIK.head.y,rightArmIK.head.z)
    rightArmIK.use_deform = False
    
    leftArmIK = amt.edit_bones.new('leftArmIK')
    leftArmIK.head = leftHand.tail
    leftArmIK.tail = (leftArmIK.head.x-coef,leftArmIK.head.y,leftArmIK.head.z)
    leftArmIK.use_deform = False
    
    headIK = amt.edit_bones.new('headIK')
    headIK.head = head.tail
    headIK.tail = (headIK.head.x-coef,headIK.head.y,headIK.head.z)
    headIK.use_deform = False
    
    firstControl = amt.edit_bones.new('firstControl')
    firstControl.head = (hips.tail.x+gripDistance,hips.tail.y,hips.tail.z)
    firstControl.tail = (firstControl.head.x ,firstControl.head.y ,firstControl.head.z+coef)
    firstControl.use_deform = False
    
    control = amt.edit_bones.new('control')
    control.head = (0,balises["pelvis"].y,0)
    control.tail = (2*coef,balises["pelvis"].y,0)
    control.use_deform = False
    
    bpy.ops.armature.select_all(action='DESELECT')
    headIK.select = True;
    rightArmIK.select = True;
    leftArmIK.select = True;
    rightKneeIK.select = True;
    leftKneeIK.select = True;
    rightElbowIK.select = True;
    leftElbowIK.select = True;
    hips.select = True;
    amt.edit_bones.active=firstControl;
    bpy.ops.armature.parent_set(type='OFFSET')
    
    bpy.ops.armature.select_all(action='DESELECT')
    firstControl.select = True;
    rightLegIK.select = True;
    leftLegIK.select = True;
    amt.edit_bones.active=control;
    bpy.ops.armature.parent_set(type='OFFSET')
    
    """bpy.ops.armature.select_all(action='DESELECT')
    rightFoot.select = True;
    amt.edit_bones.active=rightLegIK;
    bpy.ops.armature.parent_set(type='OFFSET')
    
    bpy.ops.armature.select_all(action='DESELECT')
    leftFoot.select = True;
    amt.edit_bones.active=leftLegIK;
    bpy.ops.armature.parent_set(type='OFFSET')"""
    
    bpy.ops.object.mode_set(mode='POSE')
    
    bpy.ops.pose.select_all(action='DESELECT')
    bpy.context.object.pose.bones['headIK'].bone.select = True
    bpy.context.object.data.bones.active = bpy.context.object.data.bones['head']
    bpy.ops.pose.constraint_add_with_targets(type='IK')
    cons = bpy.context.object.pose.bones["head"].constraints["IK"]
    cons.chain_count=5
    
    bpy.ops.pose.select_all(action='DESELECT')
    bpy.context.object.pose.bones['leftArmIK'].bone.select = True
    bpy.context.object.data.bones.active = bpy.context.object.data.bones['leftHand']
    bpy.ops.pose.constraint_add_with_targets(type='IK')
    cons = bpy.context.object.pose.bones["leftHand"].constraints["IK"]
    cons.chain_count=3
    cons.pole_target=bpy.data.objects["rig"]
    cons.pole_subtarget = "leftElbowIK"
    #cons.pole_angle = 3.14159

    
    bpy.ops.pose.select_all(action='DESELECT')
    bpy.context.object.pose.bones['rightArmIK'].bone.select = True
    bpy.context.object.data.bones.active = bpy.context.object.data.bones['rightHand']
    bpy.ops.pose.constraint_add_with_targets(type='IK')
    cons = bpy.context.object.pose.bones["rightHand"].constraints["IK"]
    cons.chain_count=3
    cons.pole_target=bpy.data.objects["rig"]
    cons.pole_subtarget = "rightElbowIK"
    
    bpy.ops.pose.select_all(action='DESELECT')
    bpy.context.object.pose.bones['leftLegIK'].bone.select = True
    bpy.context.object.data.bones.active = bpy.context.object.data.bones['leftLeg']
    bpy.ops.pose.constraint_add_with_targets(type='IK')
    cons = bpy.context.object.pose.bones["leftLeg"].constraints["IK"]
    cons.chain_count=2
    cons.pole_target=bpy.data.objects["rig"]
    cons.pole_subtarget = "leftKneeIK"
    
    bpy.ops.pose.select_all(action='DESELECT')
    bpy.context.object.pose.bones['rightLegIK'].bone.select = True
    bpy.context.object.data.bones.active = bpy.context.object.data.bones['rightLeg']
    bpy.ops.pose.constraint_add_with_targets(type='IK')
    cons = bpy.context.object.pose.bones["rightLeg"].constraints["IK"]
    cons.chain_count=2
    cons.pole_target=bpy.data.objects["rig"]
    cons.pole_subtarget = "rightKneeIK"
    
    bpy.ops.pose.select_all(action='DESELECT')
    bpy.context.object.data.bones.active = bpy.context.object.data.bones['rightFoot']
    bpy.ops.pose.constraint_add(type='COPY_ROTATION')
    cons = bpy.context.object.pose.bones["rightFoot"].constraints["Copy Rotation"]
    cons.target = bpy.data.objects["rig"]
    cons.subtarget = "rightLegIK"
    cons.invert_x = True
    cons.invert_y = True
    cons.invert_z = True
    cons.target_space = 'LOCAL'
    cons.owner_space = 'LOCAL'
    
    bpy.ops.pose.select_all(action='DESELECT')
    bpy.context.object.data.bones.active = bpy.context.object.data.bones['leftFoot']
    bpy.ops.pose.constraint_add(type='COPY_ROTATION')
    cons = bpy.context.object.pose.bones["leftFoot"].constraints["Copy Rotation"]
    cons.target = bpy.data.objects["rig"]
    cons.subtarget = "leftLegIK"
    cons.invert_x = True
    cons.invert_y = True
    cons.invert_z = True
    cons.target_space = 'LOCAL'
    cons.owner_space = 'LOCAL'
    
    bpy.context.scene.layers[1]=True
    bpy.context.scene.layers[0]=False
    bpy.ops.object.mode_set(mode='OBJECT')
    bpy.ops.object.select_all(action='SELECT')
    bpy.ops.object.delete(use_global=False)
    bpy.ops.mesh.primitive_torus_add(rotation=(0, 0, 0), view_align=False, location=(0, 0, 0), major_radius=coef*4, minor_radius=.2*coef)
    bpy.context.selected_objects[0].name="MyTorus"
    bpy.ops.mesh.primitive_uv_sphere_add(size=coef, location=(0, 0, 0))
    bpy.context.selected_objects[0].name="MySphere"
    bpy.context.scene.layers[0]=True
    bpy.context.scene.layers[1]=False
    
    #amt.select=True
    bpy.context.scene.objects.active = bpy.data.objects['rig']
    bpy.ops.object.mode_set(mode='POSE')
    bpy.context.object.pose.bones["control"].custom_shape = bpy.data.objects["MyTorus"]
    bpy.context.object.pose.bones["firstControl"].custom_shape = bpy.data.objects["MySphere"]
    bpy.context.object.pose.bones["rightKneeIK"].custom_shape = bpy.data.objects["MySphere"]
    bpy.context.object.pose.bones["rightElbowIK"].custom_shape = bpy.data.objects["MySphere"]
    bpy.context.object.pose.bones["leftKneeIK"].custom_shape = bpy.data.objects["MySphere"]
    bpy.context.object.pose.bones["leftElbowIK"].custom_shape = bpy.data.objects["MySphere"]

    bpy.ops.object.mode_set(mode='OBJECT')
    
    
    bpy.ops.object.parent_set(type='ARMATURE_AUTO')
    
    
    return rig

def placerBalise():
    if nbPlacer < nbBalise:
        bpy.ops.mesh.primitive_uv_sphere_add(size=1, location=(0, 0, 0))
        bpy.ops.object.modal_operator('INVOKE_DEFAULT')
        nbPlacer+=1
        
def placerBalise():
    bpy.ops.object.modal_operator('INVOKE_DEFAULT')
        
def positionView():
    for area in bpy.context.screen.areas:
        if area.type == 'VIEW_3D':
            for region in area.regions:
                if region.type == 'WINDOW':
                    area3D = area
                    area3D.spaces[0].region_3d.view_perspective = 'ORTHO'
                    override = {'area': area, 'region': region, 'edit_object': bpy.context.edit_object}
                    bpy.ops.view3d.viewnumpad(override, type = 'RIGHT')
                    
def deleteBalises():
    bpy.ops.object.select_all(action='DESELECT')
    bpy.data.objects["topHead"].select=True
    bpy.data.objects["neckBase"].select=True
    bpy.data.objects["pelvis"].select=True
    bpy.data.objects["leftHand"].select=True
    bpy.data.objects["rightHand"].select=True
    bpy.data.objects["leftFoot"].select=True
    bpy.data.objects["rightFoot"].select=True
    bpy.ops.object.delete(use_global=False)
    
    
def link():
    bpy.context.scene.objects.active=bpy.data.objects["rig"]
    bpy.ops.object.parent_set(type='ARMATURE_AUTO')
    
def jump():
    scene = bpy.context.scene
    mytool = scene.my_tool
    
    hauteur=mytool.jumpHeight
    nbFrame=200

    ob = bpy.data.objects['rig']
    bpy.context.scene.objects.active = ob
    bpy.ops.object.mode_set(mode='POSE')

    pbone = ob.pose.bones['firstControl']
    rl = ob.pose.bones['rightLegIK']
    ll = ob.pose.bones['leftLegIK']
    ra = ob.pose.bones['rightArmIK']
    la = ob.pose.bones['leftArmIK']



    for framee in range(0,int(nbFrame)):
        pbone.location=(0,hauteur*-math.sin(framee/float(nbFrame)*3.14*2),0)
        pbone.keyframe_insert(data_path="location" ,frame=framee)

        la.location=(0,0,-math.sin(framee/float(nbFrame)*3.14*2)*5)
        la.keyframe_insert(data_path="location" ,frame=framee)
        ra.location=(0,0,-math.sin(framee/float(nbFrame)*3.14*2)*5)
        ra.keyframe_insert(data_path="location" ,frame=framee)
        
    bpy.ops.screen.animation_play()
    
def walk():
    print("walk")
                        

if __name__ == "__main__":
    #bpy.ops.wm.mouse_position('INVOKE_DEFAULT')
    balises = {}
    
    
    
    """balises["neckBase"] = bpy.data.objects["neckBase"].location
    balises["pelvis"] = bpy.data.objects["pelvis"].location
    balises["leftHand"] = bpy.data.objects["leftHand"].location
    balises["rightHand"] = bpy.data.objects["rightHand"].location
    balises["leftFoot"] = bpy.data.objects["leftFoot"].location
    balises["rightFoot"] = bpy.data.objects["rightFoot"].location
    print"""