import bpy
from bpy_extras import view3d_utils

class CustomPanel(bpy.types.Panel):
    
    bl_label = "Auto Rigify"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'TOOLS'

    def draw(self, context):
        
        self.layout.operator("rig.positionview")
        self.layout.operator("rig.placebalise")
        self.layout.operator("rig.generaterig")


bpy.utils.register_class(CustomPanel)

class RIG_OT_positionview(bpy.types.Operator):
    bl_idname = "rig.positionview"
    bl_label = "Position View"
 
    def execute(self, context):
        positionView()
        return{'FINISHED'}    
 
#    Registration
bpy.utils.register_class(RIG_OT_positionview)

class RIG_OT_placebalise(bpy.types.Operator):
    bl_idname = "rig.placebalise"
    bl_label = "Place balises"
 
    def execute(self, context):
        placerBalise()
        return{'FINISHED'}    
 
#    Registration
bpy.utils.register_class(RIG_OT_placebalise)

class RIG_OT_generaterig(bpy.types.Operator):
    bl_idname = "rig.generaterig"
    bl_label = "Generate rig"
 
    def execute(self, context):
        createArmature((0,0,0))
        return{'FINISHED'}    
 
#    Registration
bpy.utils.register_class(RIG_OT_generaterig)

class ModalOperator(bpy.types.Operator):
    bl_idname = "object.modal_operator"
    bl_label = "Simple Modal Operator"
    
    nbBalises = 7
    nbPlacer = 0
    
    names = ["topHead", "neckBase", "pelvis", "leftHand", "rightHand", "leftFeet", "rightFeet"]
    
    def placerRepere(self):
        bpy.ops.mesh.primitive_uv_sphere_add(size=.1, location=(0, 0, 0))
        bpy.context.selected_objects[0].name=self.names[self.nbPlacer]

    def __init__(self):
        print("Start")
        self.placerRepere()

    def __del__(self):
        #placerBalise()
        print("End")

    def execute(self, context):
        for area in bpy.context.screen.areas:
            if area.type == 'VIEW_3D':
                for region in area.regions:
                    if region.type == 'WINDOW':
                        override = {'area': area, 'region': region, 'edit_object': bpy.context.edit_object}
                        event = self.event
                        rv3d = area.spaces[0].region_3d
                        coord = event.mouse_region_x, event.mouse_region_y

                        # get the ray from the viewport and mouse
                        ray_origin = view3d_utils.region_2d_to_origin_3d(region, rv3d, coord)
                        context.object.location.y = ray_origin.y
                        context.object.location.z = ray_origin.z
        

    def modal(self, context, event):
        if event.type == 'MOUSEMOVE':  # Apply
            self.event = event
            self.execute(context)
        elif event.type == 'LEFTMOUSE' and event.value == 'RELEASE':  # Confirm
            self.nbPlacer+=1
            if self.nbPlacer == self.nbBalises:
                return {'FINISHED'}
            else:
                self.placerRepere()
        elif event.type in ( 'ESC'):  # Cancel
            return {'CANCELLED'}

        return {'RUNNING_MODAL'}

    def invoke(self, context, event):
        self.event = event
        self.execute(context)

        print(context.window_manager.modal_handler_add(self))
        return {'RUNNING_MODAL'}


bpy.utils.register_class(ModalOperator)


def createArmature(origin):
    
    feetLength=.3
    gripDistance = .5
    coef=.3
    
    balises = {}
    
    balises["topHead"] = bpy.data.objects["topHead"].location
    balises["neckBase"] = bpy.data.objects["neckBase"].location
    balises["pelvis"] = bpy.data.objects["pelvis"].location
    balises["leftHand"] = bpy.data.objects["leftHand"].location
    balises["rightHand"] = bpy.data.objects["rightHand"].location
    balises["leftFeet"] = bpy.data.objects["leftFeet"].location
    balises["rightFeet"] = bpy.data.objects["rightFeet"].location
    
    
    
    #bpy.ops.object.mode_set(mode='OBJECT')
    bpy.ops.object.select_all(action='DESELECT')
    #bpy.ops.object.delete(use_global=False)
    
    
    # Create armature and object
    #bpy.ops.object.mode_set(mode='OBJECT')
    
    amt = bpy.data.armatures.new('arm')
    rig = bpy.data.objects.new('rig', amt)
    edit_bones={}
    rig.location = origin
    rig.show_x_ray = True
    amt.show_names = True
    # Link object to scene
    scn = bpy.context.scene
    scn.objects.link(rig)
    scn.objects.active = rig
    scn.update()
 
    # Create bones
    
    coefArticulation=.01
    
    bpy.ops.object.editmode_toggle()
    
    diffX=balises["neckBase"].x - balises["pelvis"].x
    diffX/=3
    diffY=balises["neckBase"].y - balises["pelvis"].y
    diffY/=3
    diffZ=balises["neckBase"].z - balises["pelvis"].z
    diffZ/=3
    
    spine1 = amt.edit_bones.new('spine1')
    spine1.head = (balises["pelvis"].x,balises["pelvis"].y,balises["pelvis"].z)
    spine1.tail = (balises["pelvis"].x+diffX-coefArticulation,balises["pelvis"].y+diffY,balises["pelvis"].z+diffZ)
    
    spine2 = amt.edit_bones.new('spine2')
    spine2.head = spine1.tail
    spine2.tail = (balises["pelvis"].x+diffX*2-coefArticulation,balises["pelvis"].y+diffY*2,balises["pelvis"].z+diffZ*2)
    spine2.use_connect = True
    spine2.parent = spine1
    
    spine3 = amt.edit_bones.new('spine3')
    spine3.head = spine2.tail
    spine3.tail = (balises["neckBase"].x,balises["neckBase"].y,balises["neckBase"].z)
    spine3.use_connect = True
    spine3.parent = spine2
    
    diffX=balises["topHead"].x - balises["neckBase"].x
    diffX/=2
    diffY=balises["topHead"].y - balises["neckBase"].y
    diffY/=2
    diffZ=balises["topHead"].z - balises["neckBase"].z
    diffZ/=2
    
    neck = amt.edit_bones.new('neck')
    neck.head = spine3.tail
    neck.tail = (balises["neckBase"].x+diffX,balises["neckBase"].y+diffY,balises["neckBase"].z+diffZ)
    neck.use_connect = True
    neck.parent = spine3
    
    head = amt.edit_bones.new('head')
    head.head = neck.tail
    head.tail = (balises["topHead"].x,balises["topHead"].y,balises["topHead"].z)
    head.use_connect = True
    head.parent = neck
    
    nb=5
    diffX=(balises["leftHand"].x - balises["neckBase"].x)/nb
    diffY=(balises["leftHand"].y - balises["neckBase"].y)/nb
    diffZ=(balises["leftHand"].z - balises["neckBase"].z)/nb
    
    leftArm = amt.edit_bones.new('leftArm')
    leftArm.head = spine3.tail
    leftArm.tail = (balises["neckBase"].x+diffX*2-coefArticulation,balises["neckBase"].y+diffY*2,balises["neckBase"].z+diffZ*2)
    leftArm.use_connect = True
    leftArm.parent = spine3
    
    leftForearm = amt.edit_bones.new('leftForearm')
    leftForearm.head = leftArm.tail
    leftForearm.tail = (balises["neckBase"].x+diffX*4-coefArticulation,balises["neckBase"].y+diffY*4,balises["neckBase"].z+diffZ*4)
    leftForearm.use_connect = True
    leftForearm.parent = leftArm
    
    leftHand = amt.edit_bones.new('leftHand')
    leftHand.head = leftForearm.tail
    leftHand.tail = (balises["leftHand"].x,balises["leftHand"].y,balises["leftHand"].z)
    leftHand.use_connect = True
    leftHand.parent = leftForearm
    
    nb=5
    diffX=(balises["rightHand"].x - balises["neckBase"].x)/nb
    diffY=(balises["rightHand"].y - balises["neckBase"].y)/nb
    diffZ=(balises["rightHand"].z - balises["neckBase"].z)/nb
    
    rightArm = amt.edit_bones.new('rightArm')
    rightArm.head = spine3.tail
    rightArm.tail = (balises["neckBase"].x+diffX*2-coefArticulation,balises["neckBase"].y+diffY*2,balises["neckBase"].z+diffZ*2)
    rightArm.use_connect = True
    rightArm.parent = spine3
    
    rigthForearm = amt.edit_bones.new('rigthForearm')
    rigthForearm.head = rightArm.tail
    rigthForearm.tail = (balises["neckBase"].x+diffX*4-coefArticulation,balises["neckBase"].y+diffY*4,balises["neckBase"].z+diffZ*4)
    rigthForearm.use_connect = True
    rigthForearm.parent = rightArm
    
    rightHand = amt.edit_bones.new('rightHand')
    rightHand.head = rigthForearm.tail
    rightHand.tail = (balises["rightHand"].x,balises["rightHand"].y,balises["rightHand"].z)
    rightHand.use_connect = True
    rightHand.parent = rigthForearm
    
    startX=balises["pelvis"].x
    startY=balises["leftFeet"].y
    startZ=balises["pelvis"].z
    nb=8.5
    diffX=(balises["leftFeet"].x - startX)/nb
    diffY=(balises["leftFeet"].y - startY)/nb
    diffZ=(balises["leftFeet"].z - startZ)/nb
    
    leftThigh = amt.edit_bones.new('leftThigh')
    leftThigh.head = (startX,startY, startZ)
    leftThigh.tail = (startX+diffX*4+coefArticulation,startY+diffY*4, startZ+diffZ*4)
    leftThigh.parent = spine1
    
    leftLeg = amt.edit_bones.new('leftLeg')
    leftLeg.head = leftThigh.tail
    leftLeg.tail = (startX+diffX*8+coefArticulation,startY+diffY*8, startZ+diffZ*8)
    leftLeg.use_connect = True
    leftLeg.parent = leftThigh
    
    leftFeet = amt.edit_bones.new('leftFeet')
    leftFeet.head = leftLeg.tail
    leftFeet.tail = (feetLength,balises["leftFeet"].y,balises["leftFeet"].z)
    leftFeet.use_connect = True
    leftFeet.parent = leftLeg
    
    startX=balises["pelvis"].x
    startY=balises["rightFeet"].y
    startZ=balises["pelvis"].z
    nb=8.5
    diffX=(balises["rightFeet"].x - startX)/nb
    diffY=(balises["rightFeet"].y - startY)/nb
    diffZ=(balises["rightFeet"].z - startZ)/nb
    
    rightThigh = amt.edit_bones.new('rightThigh')
    rightThigh.head = (startX,startY, startZ)
    rightThigh.tail = (startX+diffX*4+coefArticulation,startY+diffY*4, startZ+diffZ*4)
    rightThigh.parent = spine1
    
    rightLeg = amt.edit_bones.new('rightLeg')
    rightLeg.head = rightThigh.tail
    rightLeg.tail = (startX+diffX*8+coefArticulation,startY+diffY*8, startZ+diffZ*8)
    rightLeg.use_connect = True
    rightLeg.parent = rightThigh
    
    rightFeet = amt.edit_bones.new('rightFeet')
    rightFeet.head = rightLeg.tail
    rightFeet.tail = (feetLength,balises["rightFeet"].y,balises["rightFeet"].z)
    rightFeet.use_connect = True
    rightFeet.parent = rightLeg
    
    rightLegIK = amt.edit_bones.new('rightLegIK')
    rightLegIK.head = rightFeet.head
    rightLegIK.tail = (rightLegIK.head.x-coef,rightLegIK.head.y,rightLegIK.head.z)
    rightLegIK.use_deform = False
    
    leftLegIK = amt.edit_bones.new('leftLegIK')
    leftLegIK.head = leftFeet.head
    leftLegIK.tail = (leftLegIK.head.x-coef,leftLegIK.head.y,leftLegIK.head.z)
    leftLegIK.use_deform = False
    
    rightKneeIK = amt.edit_bones.new('rightKneeIK')
    rightKneeIK.head = (rightLeg.head.x+gripDistance,rightLeg.head.y,rightLeg.head.z)
    rightKneeIK.tail = (rightKneeIK.head.x ,rightKneeIK.head.y ,rightKneeIK.head.z+coef)
    rightKneeIK.use_deform = False
    
    leftKneeIK = amt.edit_bones.new('leftKneeIK')
    leftKneeIK.head = (leftLeg.head.x+gripDistance,leftLeg.head.y,leftLeg.head.z)
    leftKneeIK.tail = (leftKneeIK.head.x ,leftKneeIK.head.y ,leftKneeIK.head.z+coef)
    leftKneeIK.use_deform = False
    
    rightElbowIK = amt.edit_bones.new('rightElbowIK')
    rightElbowIK.head = (rightArm.tail.x+gripDistance,rightArm.tail.y,rightArm.tail.z)
    rightElbowIK.tail = (rightElbowIK.head.x ,rightElbowIK.head.y ,rightElbowIK.head.z+coef)
    rightElbowIK.use_deform = False
    
    leftElbowIK = amt.edit_bones.new('leftElbowIK')
    leftElbowIK.head = (leftArm.tail.x+gripDistance,leftArm.tail.y,leftArm.tail.z)
    leftElbowIK.tail = (leftElbowIK.head.x ,leftElbowIK.head.y ,leftElbowIK.head.z+coef)
    leftElbowIK.use_deform = False
    
    rightArmIK = amt.edit_bones.new('rightArmIK')
    rightArmIK.head = rightHand.tail
    rightArmIK.tail = (rightArmIK.head.x-coef,rightArmIK.head.y,rightArmIK.head.z)
    rightArmIK.use_deform = False
    
    leftArmIK = amt.edit_bones.new('leftArmIK')
    leftArmIK.head = leftHand.tail
    leftArmIK.tail = (leftArmIK.head.x-coef,leftArmIK.head.y,leftArmIK.head.z)
    leftArmIK.use_deform = False
    
    control = amt.edit_bones.new('control')
    control.head = (0,balises["pelvis"].y,0)
    control.tail = (2*coef,balises["pelvis"].y,0)
    control.use_deform = False
    
    bpy.ops.armature.select_all(action='DESELECT')
    rightLegIK.select = True;
    leftLegIK.select = True;
    rightArmIK.select = True;
    leftArmIK.select = True;
    rightKneeIK.select = True;
    leftKneeIK.select = True;
    rightElbowIK.select = True;
    leftElbowIK.select = True;
    spine1.select = True;
    amt.edit_bones.active=control;
    bpy.ops.armature.parent_set(type='OFFSET')
    
    """bpy.ops.armature.select_all(action='DESELECT')
    rightFeet.select = True;
    amt.edit_bones.active=rightLegIK;
    bpy.ops.armature.parent_set(type='OFFSET')
    
    bpy.ops.armature.select_all(action='DESELECT')
    leftFeet.select = True;
    amt.edit_bones.active=leftLegIK;
    bpy.ops.armature.parent_set(type='OFFSET')"""
    
    bpy.ops.object.mode_set(mode='POSE')
    
    bpy.ops.pose.select_all(action='DESELECT')
    bpy.context.object.pose.bones['leftArmIK'].bone.select = True
    bpy.context.object.data.bones.active = bpy.context.object.data.bones['leftHand']
    bpy.ops.pose.constraint_add_with_targets(type='IK')
    cons = bpy.context.object.pose.bones["leftHand"].constraints["IK"]
    cons.chain_count=3
    cons.pole_target=bpy.data.objects["rig"]
    cons.pole_subtarget = "leftElbowIK"
    
    bpy.ops.pose.select_all(action='DESELECT')
    bpy.context.object.pose.bones['rightArmIK'].bone.select = True
    bpy.context.object.data.bones.active = bpy.context.object.data.bones['rightHand']
    bpy.ops.pose.constraint_add_with_targets(type='IK')
    cons = bpy.context.object.pose.bones["rightHand"].constraints["IK"]
    cons.chain_count=3
    cons.pole_target=bpy.data.objects["rig"]
    cons.pole_subtarget = "rightElbowIK"
    
    bpy.ops.pose.select_all(action='DESELECT')
    bpy.context.object.pose.bones['leftLegIK'].bone.select = True
    bpy.context.object.data.bones.active = bpy.context.object.data.bones['leftLeg']
    bpy.ops.pose.constraint_add_with_targets(type='IK')
    cons = bpy.context.object.pose.bones["leftLeg"].constraints["IK"]
    cons.chain_count=2
    cons.pole_target=bpy.data.objects["rig"]
    cons.pole_subtarget = "leftKneeIK"
    
    bpy.ops.pose.select_all(action='DESELECT')
    bpy.context.object.pose.bones['rightLegIK'].bone.select = True
    bpy.context.object.data.bones.active = bpy.context.object.data.bones['rightLeg']
    bpy.ops.pose.constraint_add_with_targets(type='IK')
    cons = bpy.context.object.pose.bones["rightLeg"].constraints["IK"]
    cons.chain_count=2
    cons.pole_target=bpy.data.objects["rig"]
    cons.pole_subtarget = "rightKneeIK"
    
    bpy.context.scene.layers[1]=True
    bpy.context.scene.layers[0]=False
    bpy.ops.object.mode_set(mode='OBJECT')
    bpy.ops.object.select_all(action='SELECT')
    bpy.ops.object.delete(use_global=False)
    bpy.ops.mesh.primitive_torus_add(rotation=(0, 0, 0), view_align=False, location=(0, 0, 0), major_radius=coef*4, minor_radius=.2*coef)
    bpy.context.selected_objects[0].name="MyTorus"
    bpy.ops.mesh.primitive_uv_sphere_add(size=coef, location=(0, 0, 0))
    bpy.context.selected_objects[0].name="MySphere"
    bpy.context.scene.layers[0]=True
    bpy.context.scene.layers[1]=False
    
    #amt.select=True
    bpy.context.scene.objects.active = bpy.data.objects['rig']
    bpy.ops.object.mode_set(mode='POSE')
    bpy.context.object.pose.bones["control"].custom_shape = bpy.data.objects["MyTorus"]
    bpy.context.object.pose.bones["rightKneeIK"].custom_shape = bpy.data.objects["MySphere"]
    bpy.context.object.pose.bones["rightElbowIK"].custom_shape = bpy.data.objects["MySphere"]
    bpy.context.object.pose.bones["leftKneeIK"].custom_shape = bpy.data.objects["MySphere"]
    bpy.context.object.pose.bones["leftElbowIK"].custom_shape = bpy.data.objects["MySphere"]

    bpy.ops.object.mode_set(mode='OBJECT')
    return rig

def placerBalise():
    if nbPlacer < nbBalise:
        bpy.ops.mesh.primitive_uv_sphere_add(size=1, location=(0, 0, 0))
        bpy.ops.object.modal_operator('INVOKE_DEFAULT')
        nbPlacer+=1
        
def placerBalise():
    bpy.ops.object.modal_operator('INVOKE_DEFAULT')
        
def positionView():
    for area in bpy.context.screen.areas:
        if area.type == 'VIEW_3D':
            for region in area.regions:
                if region.type == 'WINDOW':
                    area3D = area
                    area3D.spaces[0].region_3d.view_perspective = 'ORTHO'
                    override = {'area': area, 'region': region, 'edit_object': bpy.context.edit_object}
                    bpy.ops.view3d.viewnumpad(override, type = 'RIGHT')
                    

if __name__ == "__main__":
    #bpy.ops.wm.mouse_position('INVOKE_DEFAULT')
    
    print