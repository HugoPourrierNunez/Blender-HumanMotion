import bpy
from math import radians
        
def numberFrame(fileName):
    myFile = open(fileName)
    fileContent = myFile.read()
    pos = fileContent.find("Frames:") + 8
    posF = fileContent.find("Frame", pos)
    nb = fileContent[pos:posF]
    print(nb)
    return 200
    
def parsingBVH(fileName, offsetBones, nameBones, locationBonesBVH, rotationBonesBVH, tabLocationFrameBVH, tabRotationFrameBVH, nbFrame):
    scene = bpy.context.scene
    # On récupère le nobre de frame du BVH
    nbFrame = numberFrame(fileName)
    
    # Traitement KeyFrame
    ob = bpy.context.object
    
    if ob.type == 'ARMATURE':
        armature = ob.data

    for frame in range(0, int(nbFrame)):
        scene.frame_set(frame)
        for bone in armature.bones:
            bpy.ops.object.mode_set(mode='POSE')
            pbone = ob.pose.bones[bone.name]
            # On passe en mode de rotation EULER 
            pbone.rotation_mode = 'XYZ'
            locationBonesBVH[bone.name.lower()] = pbone.location
            rotationBonesBVH[bone.name.lower()] = pbone.matrix
            bpy.ops.object.mode_set(mode='OBJECT')
            #insert une keyframe
            pbone.keyframe_insert(data_path="rotation_euler" ,frame = frame)
        tabLocationFrameBVH[frame] = locationBonesBVH
        tabRotationFrameBVH[frame] = rotationBonesBVH
    # On cache le squelette du BVH
    ob.hide = True
    
# Fonction qui permet de faire l'analogie entre les nom du squelette du BVh et ceux de l'auto-rigging
def analogyzeBoneNames(boneName):
    boneName = boneName.lower()
    if boneName.find("head") != -1:
        return "head"
    elif boneName.find("neck") != -1:
        return "neck"
    elif boneName.find("spine") != -1:
        return "spine"
    elif boneName.find("lowerback") != -1 or boneName.find("back") != -1:
        return "lowerback"
    elif boneName.find("hips") != -1:
        return "hips"
    elif boneName.find("forearm") != -1 and (boneName.find("l") != -1 or boneName.find("left") != -1):
        return "leftforearm"
    elif boneName.find("arm") != -1 and (boneName.find("l") != -1 or boneName.find("left") != -1):
        return "leftarm"
    elif ((boneName.find("up") != -1 and boneName.find("leg") != -1) or boneName.find("thigh") != -1) and (boneName.find("right") != -1 or boneName.find("r") != -1):
        return "rightupleg"
    elif boneName.find("leg") != -1 and (boneName.find("right") != -1 or boneName.find("r") != -1):
        return "rightleg"
    elif ((boneName.find("up") != -1 and boneName.find("leg") != -1) or boneName.find("thigh") != -1) and (boneName.find("left") != -1 or boneName.find("l") != -1):
        return "leftupleg"
    elif boneName.find("leg") != -1 and (boneName.find("left") != -1 or boneName.find("l") != -1):
        return "leftleg"
    elif boneName.find("foot") != -1 and (boneName.find("left") != -1 or boneName.find("l") != -1):
        return "leftfoot"
    elif boneName.find("hand") != -1 and (boneName.find("left") != -1 or boneName.find("l") != -1):
        return "lefthand"
    elif boneName.find("forearm") != -1 and (boneName.find("r") != -1 or boneName.find("right") != -1):
        return "rightforearm"
    elif boneName.find("arm") != -1 and (boneName.find("r") != -1 or boneName.find("right") != -1):
        return "rightarm"
    elif boneName.find("foot") != -1 and (boneName.find("right") != -1 or boneName.find("r") != -1):
        return "rightfoot"
    elif boneName.find("hand") != -1 and (boneName.find("right") != -1 or boneName.find("r") != -1):
        return "righthand"
    else:
        return "null"

# Fonction qui permet d'appliquer la transformation de chaque bones à chaque frame sur le squelette de l'auo-rigging
def applyTransformation(fileName, offsetBones, nameBones, locationBonesBVH, rotationBonesBVH, tabLocationFrameBVH, tabRotationFrameBVH, nbFrame):
    ob = bpy.data.objects['rig']
    bpy.context.scene.objects.active = ob
    scene = bpy.context.scene
    nbFrame = numberFrame(fileName)
    if ob.type == 'ARMATURE':
        armature = ob.data
    
    # On parcourt toutes les frames du BVH
    for frame in range(0, int(nbFrame)):
        scene.frame_set(frame)
        transformationBones = tabRotationFrameBVH[frame]
        positionBones = tabLocationFrameBVH[frame]
        # On parcourt tous les os du squelette de l'auto-rigging
        for bone in armature.bones:
            analogyzeName = "null"
            pbone = ob.pose.bones[bone.name]
            if bone.name.lower().find("ik") == -1:
                analogyzeName = analogyzeBoneNames(bone.name)
            # "null" peut correspondre à un os non pris en compte par l'auro-rigging ou un os correspondant à un IK ou controller de rigging
            #if analogyzeName == "null":
                #print("ERREUR NAMING : " + bone.name)
            #else:
                #print(analogyzeName + " : " + bone.name)
                
            if analogyzeName != "null":
                pbone.rotation_mode = 'XYZ'
                pbone.matrix = transformationBones[analogyzeName]
                pbone.keyframe_insert(data_path="rotation_euler" ,frame = frame)
                if analogyzeName == "hips":
                    pbone.location = positionBones[analogyzeName]
                    pbone.keyframe_insert(data_path="location" ,frame = frame)
                
def retargeting(fileName):
    
    offsetBones = {}
    nameBones = []
    locationBonesBVH = {}
    rotationBonesBVH = {}
    tabLocationFrameBVH = {}
    tabRotationFrameBVH = {}
    nbFrame = 0
    
    bpy.ops.import_anim.bvh(filepath=fileName)
    parsingBVH(fileName, offsetBones, nameBones, locationBonesBVH, rotationBonesBVH, tabLocationFrameBVH, tabRotationFrameBVH, nbFrame)
    applyTransformation(fileName, offsetBones, nameBones, locationBonesBVH, rotationBonesBVH, tabLocationFrameBVH, tabRotationFrameBVH, nbFrame)
    
# MAIN #

# Mettre chemin du BVH
retargeting("D:\\PC\\Documents\\GitHub\\Blender-HumanMotion\\Blender\\BVH\\01\\01_02.bvh")